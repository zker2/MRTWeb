// ‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà MRT ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô/‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡∏∞ Grid Line

const stationCoords = {
  phahonyothin: [13.88, 100.6],
  sukhumvit: [13.74, 100.56],
  bang_sue: [13.80, 100.54],
  chatuchak: [13.8, 100.55],
  ladprao: [13.79, 100.6],
  ratchadaphisek: [13.80, 100.57],
  "‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠": [13.80, 100.54],
  "‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó": [13.74, 100.56],
  "‡∏´‡∏±‡∏ß‡∏•‡∏≥‡πÇ‡∏û‡∏á": [13.74, 100.52],
  "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9": [13.76, 100.57],
  "‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô": [13.88, 100.6],
  "‡∏™‡∏ß‡∏ô‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£": [13.8, 100.55],
  "‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß": [13.79, 100.6],
  "‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å": [13.80, 100.57]
};

const map = L.map("map", {
  zoomControl: false
}).setView([13.7563, 100.5018], 12);
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution: "¬© OpenStreetMap contributors",
}).addTo(map);

// ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ responsive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
function resizeMap() {
  const mapContainer = document.getElementById("map");
  const height = window.innerWidth < 768 ? window.innerHeight * 0.6 : 500;
  mapContainer.style.height = `${height}px`;
  map.invalidateSize();
}
window.addEventListener("resize", resizeMap);
window.addEventListener("load", resizeMap);

let userCoords = null;
let startMarker = null;
let endMarker = null;
let control = null;
let straightLine = null;

const redIcon = L.icon({
  iconUrl: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',
  iconSize: [32, 32],
  iconAnchor: [16, 32]
});

const blueIcon = L.icon({
  iconUrl: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',
  iconSize: [32, 32],
  iconAnchor: [16, 32]
});

for (const [station, coords] of Object.entries(stationCoords)) {
  const marker = L.marker(coords).addTo(map);
  marker.bindPopup(`üöâ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: ${station.replace("_", " ")}`);
}

function addGridLines() {
  const bounds = map.getBounds();
  const latStep = 0.01;
  const lngStep = 0.01;

  for (let lat = bounds.getSouth(); lat <= bounds.getNorth(); lat += latStep) {
    L.polyline([
      [lat, bounds.getWest()],
      [lat, bounds.getEast()],
    ], {
      color: "#ccc",
      weight: 1,
      dashArray: "4,4"
    }).addTo(map);
  }

  for (let lng = bounds.getWest(); lng <= bounds.getEast(); lng += lngStep) {
    L.polyline([
      [bounds.getSouth(), lng],
      [bounds.getNorth(), lng],
    ], {
      color: "#ccc",
      weight: 1,
      dashArray: "4,4"
    }).addTo(map);
  }
}

map.whenReady(addGridLines);


if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(
    (position) => {
      userCoords = [position.coords.latitude, position.coords.longitude];
      const marker = L.marker(userCoords).addTo(map);
      marker.bindPopup("üìç ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà").openPopup();
      map.setView(userCoords, 15);
      document.getElementById("status").textContent = "‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß";
    },
    () => {
      document.getElementById("status").textContent = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ";
    }
  );
} else {
  alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
}

const startPointSelect = document.getElementById("startPoint");
const destinationSelect = document.getElementById("destination");
const infoBox = document.getElementById("info");

const defaultStartOptions = ["‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", ...Object.keys(stationCoords)];
defaultStartOptions.forEach(name => {
  const opt = document.createElement("option");
  opt.value = name === "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" ? "userLocation" : name;
  opt.textContent = name;
  startPointSelect.appendChild(opt);
});

Object.keys(stationCoords).forEach(name => {
  const opt = document.createElement("option");
  opt.value = name;
  opt.textContent = name;
  destinationSelect.appendChild(opt);
});

function calculateRoute() {
  const startName = startPointSelect.value;
  const destName = destinationSelect.value;
  const travelMode = document.getElementById("travelMode").value;

  if (!destName) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á");

  let startCoords = null;
  if (startName === "userLocation") {
    if (!userCoords) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
      return;
    }
    startCoords = userCoords;
  } else {
    startCoords = stationCoords[startName];
  }

  const destCoords = stationCoords[destName];
  if (!startCoords || !destCoords) return;

  const from = L.latLng(startCoords);
  const to = L.latLng(destCoords);

  if (startMarker) map.removeLayer(startMarker);
  if (endMarker) map.removeLayer(endMarker);
  if (control) map.removeControl(control);
  if (straightLine) map.removeLayer(straightLine);

  startMarker = L.marker(from, { icon: blueIcon }).addTo(map).bindPopup(`‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${startName}`).openPopup();
  endMarker = L.marker(to, { icon: redIcon }).addTo(map).bindPopup(`‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: ${destName}`).openPopup();

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  straightLine = L.polyline([from, to], {
    color: "blue",
    weight: 3,
    dashArray: "4, 6",
    opacity: 0.7
  }).addTo(map);

  if (travelMode === "train") {
    const trainRoutes = {
      "‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠": ["‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠ ‚Üí ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‚Üí ‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9"],
      "‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó": ["‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‚Üí ‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9"],
      "‡∏´‡∏±‡∏ß‡∏•‡∏≥‡πÇ‡∏û‡∏á": ["‡∏´‡∏±‡∏ß‡∏•‡∏≥‡πÇ‡∏û‡∏á ‚Üí ‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠"],
      "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£": ["‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‚Üí ‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9"],
      "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9": ["‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9 ‚Üí ‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó"]
    };

    if (trainRoutes[destName]) {
      infoBox.innerHTML = `üöà ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏£‡∏ñ‡πÑ‡∏ü:<br><b>${trainRoutes[destName][0]}</b><br>üïí ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 0 ‡∏ä‡∏°. 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ <b>${destName}</b>`;
      map.setView(to, 14);
    } else {
      infoBox.innerHTML = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏£‡∏ñ‡πÑ‡∏ü‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ <b>${destName}</b> ‡πÑ‡∏î‡πâ`;
    }
    return;
  }

  control = L.Routing.control({
    waypoints: [from, to],
    lineOptions: { styles: [{ color: travelMode === 'car' ? 'blue' : 'green', weight: 5 }] },
    createMarker: () => null,
    router: L.Routing.osrmv1({
      serviceUrl: 'https://router.project-osrm.org/route/v1'
    }),
    routeWhileDragging: false,
    fitSelectedRoutes: true,
    showAlternatives: false,
    profile: travelMode === 'car' ? 'car' : 'foot'
  }).addTo(map);

  infoBox.innerHTML = `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á...`;
}

document.getElementById("btnRoute").addEventListener("click", calculateRoute);